import unittest
from unittest.mock import patch, MagicMock
from flask import json
from app import app  # Asegúrate de que 'app' es el nombre de tu archivo o módulo

class TestFlaskApp(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.app = app.test_client()
        cls.app.testing = True

    @patch('mysql.connector.connect')
    def test_add_user_success(self, mock_connect):
        # Configura el mock
        mock_cursor = MagicMock()
        mock_connection = MagicMock()
        mock_connection.cursor.return_value = mock_cursor
        mock_connect.return_value = mock_connection
        
        # Datos de prueba
        user_data = {
            "nombres": "Juan",
            "apellidos": "Pérez",
            "fecha_nacimiento": "1990-01-01",
            "password": "secreto123"
        }
        
        response = self.app.post('/add-user', 
                                 data=json.dumps(user_data),
                                 content_type='application/json')

        # Verifica que la respuesta sea exitosa
        self.assertEqual(response.status_code, 200)
        response_json = json.loads(response.data)
        self.assertEqual(response_json['status'], 'success')
        self.assertEqual(response_json['message'], 'Usuario añadido con éxito')
        mock_cursor.execute.assert_called_once()
        mock_connection.commit.assert_called_once()

    @patch('mysql.connector.connect')
    def test_get_users_success(self, mock_connect):
        # Configura el mock
        mock_cursor = MagicMock()
        mock_connection = MagicMock()
        mock_connection.cursor.return_value = mock_cursor
        mock_connect.return_value = mock_connection
        
        # Configura el resultado del cursor
        mock_cursor.fetchall.return_value = [
            {"id": 1, "nombres": "Juan", "apellidos": "Pérez", "fecha_nacimiento": "1990-01-01"}
        ]
        
        response = self.app.get('/get-users')

        # Verifica que la respuesta sea exitosa
        self.assertEqual(response.status_code, 200)
        response_json = json.loads(response.data)
        self.assertEqual(response_json['status'], 'success')
        self.assertEqual(len(response_json['data']), 1)
        self.assertEqual(response_json['data'][0]['nombres'], 'Juan')
        mock_cursor.execute.assert_called_once()

if __name__ == '__main__':
    unittest.main()



# name: Backend CI/CD Pipeline

# on:
#   push:
#     branches:
#       - backend

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Setup Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.x'

#     - name: Install dependencies
#       run: |
#         pip install -r requirements.txt

#     - name: Run unit tests
#       run: |
#         python -m unittest test_main_app.py

#   deploy:
#     runs-on: ubuntu-latest
#     needs: test # Este paso asegura que 'deploy' solo se ejecuta si 'test' pasa correctamente.

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Setup SSH
#       env:
#         EC2_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#         SERVER_IP: ${{ secrets.BACKEND_SSH_HOST }}
#         EC2_USER: ${{ secrets.BACKEND_USER_NAME }}
#         APP_DIR: /home/ubuntu/Parcial-Arquitectura-AWS-Big-Data
#       run: |
#         echo "$EC2_PRIVATE_KEY" | tr -d '\r' > ec2_key
#         chmod 600 ec2_key

#     - name: Deploy to EC2
#       env:
#         SERVER_IP: ${{ secrets.BACKEND_SSH_HOST }}
#         EC2_USER: ${{ secrets.BACKEND_USER_NAME }}
#         APP_DIR: /home/ubuntu/Parcial-Arquitectura-AWS-Big-Data
#       run: |
#         scp -o StrictHostKeyChecking=no -i ec2_key -r ./* ${EC2_USER}@${SERVER_IP}:${APP_DIR}

#         ssh -o StrictHostKeyChecking=no -i ec2_key ${EC2_USER}@${SERVER_IP} '
#             cd ${APP_DIR} &&
#             source env/bin/activate &&
#             pip install -r requirements.txt &&
#             # Puedes ajustar el siguiente comando si necesitas iniciar tu aplicación de otra manera
#             python main_app.py
#         '
